// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            Int           @id @default(autoincrement())
    firstName     String        @db.VarChar(100)
    lastName      String        @db.VarChar(100)
    userName      String        @unique
    pinHash       String        @db.Text
    nfcSerialHash String?       @unique @db.Text
    role          Role          @default(USER)
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    Balances      UserBalance[]
    Transactions  Transaction[]
    Deposit       Deposit[]
    WishLike      WishLike[]
    LegacyUser    LegacyUser?
    UserLogin     UserLogin[]

    @@index([id])
}

model UserBalance {
    userId     Int
    user       User     @relation(fields: [userId], references: [id])
    balance    Decimal  @db.Decimal(12, 2)
    validStart DateTime @default(now())
    validEnd   DateTime @default("9999-12-31T00:00:00.000Z")
    isActive   Boolean  @default(true)

    @@id([userId, validStart])
    @@index([userId, validEnd])
}

model Product {
    id               Int                @id @default(autoincrement())
    name             String             @db.VarChar(100)
    description      String             @db.Text
    imageUrl         String
    category         ProductCategory
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    ProductInventory ProductInventory[]
    Prices           ProductPrice[]
    TransactionItem  TransactionItem[]
    RestockItem      RestockItem[]

    @@index([id])
}

model ProductInventory {
    product    Product  @relation(fields: [productId], references: [id])
    productId  Int
    quantity   Int
    validStart DateTime @default(now())
    validEnd   DateTime @default("9999-12-31T00:00:00.000Z")
    isActive   Boolean  @default(true)

    @@id([productId, validStart])
    @@index([productId, validEnd])
}

model ProductPrice {
    product    Product  @relation(fields: [productId], references: [id])
    productId  Int
    price      Decimal  @db.Decimal(12, 2)
    validStart DateTime @default(now())
    validEnd   DateTime @default("9999-12-31T00:00:00.000Z")
    isActive   Boolean  @default(true)

    @@id([productId, validStart])
    @@index([productId, validEnd])
}

model Transaction {
    id              String            @id @default(cuid())
    user            User              @relation(fields: [userId], references: [id])
    userId          Int
    totalPrice      Decimal           @db.Decimal(12, 2)
    createdAt       DateTime          @default(now())
    TransactionItem TransactionItem[]

    @@index([id])
}

model TransactionItem {
    transactionId   String
    Transaction     Transaction @relation(fields: [transactionId], references: [id])
    productId       Int
    Product         Product     @relation(fields: [productId], references: [id])
    quantity        Int
    singleItemPrice Decimal     @db.Decimal(12, 2)
    totalPrice      Decimal     @db.Decimal(12, 2)

    @@id([transactionId, productId])
    @@index([transactionId])
}

model Deposit {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    amount    Decimal  @db.Decimal(12, 2)
    createdAt DateTime @default(now())

    @@index([id])
}

model Restock {
    id          Int           @id @default(autoincrement())
    createdAt   DateTime      @default(now())
    totalCost   Decimal       @db.Decimal(12, 2)
    RestockItem RestockItem[]

    @@index([id])
}

model RestockItem {
    restockId      Int
    Restock        Restock @relation(fields: [restockId], references: [id])
    productId      Int
    Product        Product @relation(fields: [productId], references: [id])
    quantity       Int
    singleItemCost Decimal @db.Decimal(12, 2)
    totalCost      Decimal @db.Decimal(12, 2)

    @@id([restockId, productId])
    @@index([restockId])
}

model Wish {
    id          Int        @id @default(autoincrement())
    title       String     @db.VarChar(100)
    description String     @db.Text
    webUrl      String?    @db.Text
    status      WishStatus @default(OPEN)
    createdAt   DateTime   @default(now())
    resolvedAt  DateTime?
    responseMsg String?    @db.VarChar(250)
    WishLike    WishLike[]
}

model WishLike {
    id        Int      @id @default(autoincrement())
    wish      Wish     @relation(fields: [wishId], references: [id])
    wishId    Int
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    createdAt DateTime @default(now())

    @@unique([wishId, userId])
}

model LegacyUser {
    id           Int     @unique
    name         String
    balance      Decimal
    newAccount   User?   @relation(fields: [newAccountId], references: [id])
    newAccountId Int?    @unique
}

model UserLogin {
    id          Int         @id @default(autoincrement()) // dummy id
    user        User        @relation(fields: [userId], references: [id])
    userId      Int
    date        DateTime    @default(now())
    loginMethod LoginMethod
    deviceType  DeviceType
}

enum WishStatus {
    OPEN
    ACCEPTED
    REJECTED
}

enum ProductCategory {
    FOOD
    DRINK
    SNACK
}

enum Role {
    USER
    ADMIN
    SUPERADMIN
}

enum DeviceType {
    MOBILE
    DESKTOP
    GUILDROOM_TABLET
    UNKNOWN
}

enum LoginMethod {
    PASSOWRD
    RFID
}
